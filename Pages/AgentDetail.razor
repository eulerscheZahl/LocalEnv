@page "/agent/{Id:int}"
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IDialogService DialogService
@inject IJSRuntime JS
@inject NavigationManager navigationManager

<h1>@game.DisplayTitle - @agent.Name</h1>

<MudCard>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Href=@($"/game/{game.Id}")>Back to game</MudButton>
        <MudButton Variant="Variant.Filled" Class="ml-2" StartIcon="@Icons.Material.Filled.Download"
            Color="Color.Primary" OnClick="Download">Download</MudButton>
        <MudButton Variant="Variant.Filled" Class="ml-2" StartIcon="@Icons.Material.Filled.FolderZip"
            Color="Color.Primary" OnClick="Export">Export</MudButton>
        <MudMenu Color="Color.Primary" Class="ml-2" Variant="Variant.Filled" Label="Diff"
            StartIcon="@Icons.Material.Filled.Compare">
            @foreach (Agent other in game.Agents)
            {
                if (other == agent) continue;
                <MudMenuItem OnClick="()=>Diff(agent, other)">@other.Name</MudMenuItem>
            }
        </MudMenu>
        <MudButton Variant="Variant.Filled" Class="ml-2" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
            OnClick="()=>deleteVisible=true">
            Delete</MudButton>
        <MudDialog @bind-IsVisible="deleteVisible">
            <DialogContent>
                <p>Do you really want to delete @agent.Name?</p>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" OnClick="()=>deleteVisible=false" Class="mr-2">
                    Cancel
                </MudButton>
                <MudButton Variant="Variant.Filled" Class="ml-2" StartIcon="@Icons.Material.Filled.Delete"
                    Color="Color.Error" OnClick="Delete">
                    Delete</MudButton>
            </DialogActions>
        </MudDialog>
    </MudCardActions>
</MudCard>

@if (game.Parameters.Count > 1)
{
    <h2 class="mt-3">Diagram</h2>
    <MudGrid>
        <MudItem xs="3" sm="2">
            <MudSelect @bind-Value="XParam" Label="x Parameter" Variant="Variant.Outlined">
                @foreach (Parameter param in game.Parameters)
                {
                    <MudSelectItem Value="@param">@param.DisplayName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="3" sm="2">
            <MudSelect @bind-Value="YParam" Label="y Parameter" Variant="Variant.Outlined">
                @foreach (Parameter param in game.Parameters.Where(p => p != xParam))
                {
                    <MudSelectItem Value="@param">@param.DisplayName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>

    <MudTable Items="@detailsTable">
        <HeaderContent>
            <MudTh></MudTh>
            @foreach (ParameterRange range in XParam.Ranges)
            {
                <MudTh>@range</MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd><b>@context[0]</b></MudTd>
            @for (int i = 1; i < context.Count; i++)
            {
                int tmp = i;
                <MudTd>@context[tmp]</MudTd>
            }
        </RowTemplate>
    </MudTable>
}

<h2 class="mt-3">Testcase details</h2>
<MudTable Dense="true" Striped="true" Hover="true" SortLabel="Sort By" Items="@agent.TestcaseResults"
    Filter="new Func<TestcaseResult,bool>(TableFilter)">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                SortBy="new Func<TestcaseResult, object>(x=>x.Seed)">Seed</MudTableSortLabel>
            <br />
            <MudInput @bind-Value="seedFilter" Placeholder="Seed filter"></MudInput>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<TestcaseResult, object>(x=>RelativeScore(x.Seed,x.Score))">Relative
                score</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<TestcaseResult, object>(x=>x.Score)">Absolute score</MudTableSortLabel>
            <MudMenu Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add">
                @foreach (Agent other in game.Agents)
                {
                    if (other == agent || additionalAgents.Contains(other)) continue;
                    <MudMenuItem OnClick="()=>additionalAgents.Add(other)">@other.Name</MudMenuItem>
                }
            </MudMenu>
        </MudTh>
        @foreach (Agent a in additionalAgents)
        {
            <MudTh>@a.Name <MudIconButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Error" Class="ml-2"
                Icon="@Icons.Material.Filled.Delete" OnClick="()=>additionalAgents.Remove(a)"></MudIconButton>
            </MudTh>
        }
        @foreach (string info in additionalInfo)
        {
            <MudTh>@info</MudTh>
        }
        <MudTh>
            <MudTableSortLabel SortBy="new Func<TestcaseResult, object>(x=>x.Time)">Time</MudTableSortLabel>
        </MudTh>
        @foreach (Parameter param in game.Parameters)
        {
            <MudTh>
                <MudTableSortLabel
                SortBy="new Func<TestcaseResult, object>(x=>seedInfos[x.Seed].ParameterValues.First(v=>v.Parameter.Id==param.Id).Value)">
                    @param.DisplayName</MudTableSortLabel>
                <br />
                <MudInput @bind-Value="paramFilter[game.Parameters.IndexOf(param)]"
                Placeholder="@($"{param.DisplayName} filter")"></MudInput>
            </MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Seed">@context.Seed</MudTd>
        <MudTd DataLabel="RelativeScore">@FormatNumber(RelativeScore(context.Seed, context.Score))</MudTd>
        <MudTd DataLabel="AbsoluteScore">@context.Score</MudTd>
        @foreach (Agent a in additionalAgents)
        {
            <MudTh>@(a.TestcaseResults.FirstOrDefault(r => r.Seed == context.Seed)?.Score.ToString() ?? "-")</MudTh>
        }
        @foreach (string info in additionalInfo)
        {
            <MudTh>@(context.AdditionalValues().ContainsKey(info) ? context.AdditionalValues()[info] : "-")</MudTh>
        }
        <MudTd DataLabel="Time">@context.Time ms</MudTd>
        @foreach (Parameter param in game.Parameters)
        {
            <MudTd DataLabel="@param.InternalName">
                @FormatNumber(seedInfos[context.Seed].ParameterValues.First(v=>v.Parameter.Id==param.Id).Value)
            </MudTd>
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public int Id { get; set; }
    private Game game;
    private Agent agent;
    private List<Agent> additionalAgents = new();
    private List<string> additionalInfo = new();
    private Parameter xParam, yParam;
    private Parameter XParam
    {
        get => xParam;
        set
        {
            xParam = value;
            if (xParam == YParam) YParam = game.Parameters.FirstOrDefault(p => p != xParam);
            else UpdateDetails();
        }
    }
    private Parameter YParam
    {
        get => yParam;
        set
        {
            yParam = value;
            UpdateDetails();
        }
    }
    private Dictionary<long, SeedInfo> seedInfos = new();
    private bool deleteVisible;
    private List<List<string>> detailsTable = new();

    private string seedFilter;
    private string[] paramFilter;

    protected override void OnParametersSet()
    {
        using var context = DbFactory.CreateDbContext();
        game = context.Games
        .Include(g => g.Parameters)
        .ThenInclude(p => p.Ranges)
        .Include(g => g.SeedInfos)
        .ThenInclude(s => s.ParameterValues)
        .ThenInclude(p => p.Parameter)
        .Include(g => g.Agents)
        .ThenInclude(a => a.TestcaseResults)
        .AsSplitQuery()
        .First(g => g.Agents.Any(a => a.Id == Id));
        agent = game.Agents.First(a => a.Id == Id);
        game.InitScores();
        seedInfos = game.SeedInfos.ToDictionary(s => s.Seed, s => s);
        xParam = game.Parameters.FirstOrDefault();
        YParam = game.Parameters.FirstOrDefault(p => p != xParam);
        additionalInfo = agent.TestcaseResults.SelectMany(r => r.AdditionalValues().Keys).Distinct().ToList();
        paramFilter = new string[game.Parameters.Count];
    }

    private double RelativeScore(long seed, double absoluteScore)
    => game.ComputeRelativeScore(seedInfos[seed], absoluteScore);

    private string FormatNumber(double number)
    {
        if (number == (int)number) return number.ToString();
        return number.ToString("0.000", CultureInfo.InvariantCulture);
    }

    private void UpdateDetails()
    {
        detailsTable.Clear();
        Dictionary<long, double> agentScores = agent.TestcaseResults.ToDictionary(r => r.Seed, r => r.Score);
        foreach (ParameterRange y in YParam.Ranges)
        {
            List<string> row = new() { y.ToString() };
            List<SeedInfo> infos = game.SeedInfos.Where(s => agentScores.ContainsKey(s.Seed) && s.Ranges.Contains(y)).ToList();
            foreach (ParameterRange x in XParam.Ranges)
            {
                List<SeedInfo> cellSeeds = infos.Where(s => s.Ranges.Contains(x)).ToList();
                HashSet<long> seeds = cellSeeds.Select(s => s.Seed).ToHashSet();
                List<double> scores = cellSeeds.Select(s => RelativeScore(s.Seed, agentScores[s.Seed])).ToList();
                if (scores.Count > 0)
                {
                    double sum = scores.Sum();
                    List<double> otherSums = game.Agents.Select(a => a.TestcaseResults.Where(r => seeds.Contains(r.Seed)).Sum(r =>
                    RelativeScore(r.Seed, r.Score))).ToList();
                    row.Add(FormatNumber(100 * scores.Average()) + $" [{1 + otherSums.Count(s => s > sum)}]");
                }
                else row.Add("-");
            }
            detailsTable.Add(row);
        }
    }

    private async Task Download()
    {
        FileStream fileStream = new FileStream(agent.CodePath, FileMode.Open);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", Path.GetFileName(agent.CodePath), streamRef);
    }

    private async Task Export()
    {
        string code = await agent.BundleCode();
        using (var memoryStream = new MemoryStream())
        {
            using (var archive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
            {
                var entry = archive.CreateEntry(game.ExportTitle + agent.CodeExtension());
                using (var entryStream = entry.Open())
                using (var streamWriter = new StreamWriter(entryStream))
                {
                    streamWriter.Write(code);
                }
            }

            memoryStream.Seek(0, SeekOrigin.Begin);
            using var streamRef = new DotNetStreamReference(stream: memoryStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", game.ExportTitle + ".zip", streamRef);
        }
    }

    private void Delete()
    {
        deleteVisible = false;
        using var context = DbFactory.CreateDbContext();
        Agent agent = context.Agents.Include(a => a.TestcaseResults).First(a => a.Id == Id);
        Directory.Delete(Path.GetDirectoryName(agent.CodePath), true);
        context.Agents.Remove(agent);
        context.TestcaseResults.RemoveRange(agent.TestcaseResults);
        context.Games.Include(g => g.Agents).First(g => g.Id == game.Id).Agents.RemoveAll(a => a.Id == agent.Id);
        context.SaveChanges();
        navigationManager.NavigateTo("/game/" + game.Id);
    }

    private bool TableFilter(TestcaseResult result)
    {
        if (!FilterMatch(seedFilter, result.Seed)) return false;
        for (int i = 0; i < paramFilter.Length; i++)
        {
            if (!FilterMatch(paramFilter[i],
            seedInfos[result.Seed].ParameterValues.First(v => v.Parameter.Id == game.Parameters[i].Id).Value)) return false;
        }
        return true;
    }

    private bool FilterMatch(string filter, double value)
    {
        if (string.IsNullOrWhiteSpace(filter)) return true;
        string[] parts = filter.Split(',');
        foreach (string range in parts)
        {
            if (double.TryParse(range, out double r) && r == value) return true;
            string[] limits = range.Split('-');
            if (limits.Length == 2)
            {
                double.TryParse(limits[0], out double min);
                double.TryParse(limits[1], out double max);
                if (value >= min && value <= max) return true;
            }

        }
        return false;
    }

    private async Task Diff(Agent current, Agent other)
    {
        await JS.InvokeAsync<object>("open", $"agent-diff/?prev={other.Id}&current={agent.Id}", "_blank");
    }
}