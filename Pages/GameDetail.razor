@page "/game/{Id:int}"
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IDialogService DialogService

<style type="text/css">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

    .w200 {
        max-width: 200px;
    }
</style>

<h1>@game.DisplayTitle - @game.ExportTitle</h1>

<div class="d-flex">
    <MudNumericField Label="Number of threads" @bind-Value="MaxThreads" For="(() => MaxThreads)" Class="mr-5 w200" />
    @if (game.Running)
    {
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Stop" Color="Color.Error" OnClick="Stop">
            Stop
        </MudButton>
    }
    else
    {
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Primary"
        OnClick="Start">
            Start
        </MudButton>
    }
    <MudButton Class="ml-5" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary"
        Href="@($"/game/edit/{Id}")">
        Edit
    </MudButton>
</div>

<MudTable Hover="true" Striped="true" Bordered="true" Dense="true" Items="@game.Agents" CustomHeader="true"
    HeaderClass="table-head-bordered">
    <ToolBarContent>
        <MudText Typo="Typo.h6" Class="mr-5">Agents</MudText>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary"
            OnClick="AddAgent">
            Add Agent
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTHeadRow Class="header-centered">
            <MudTh></MudTh>
            <MudTh></MudTh>
            @foreach (Parameter p in game.Parameters)
            {
                <MudTh colspan="@p.Ranges.Count">@p.DisplayName</MudTh>
            }
            <MudTh></MudTh>
        </MudTHeadRow>
        <MudTHeadRow>
            <MudTh>Agent Name</MudTh>
            <MudTh>Score [@game.SeedCount]</MudTh>
            @foreach (Parameter p in game.Parameters)
            {
                @foreach (ParameterRange range in p.Ranges)
                {
                    <MudTh>@range [@range.Testcases]</MudTh>
                }
            }
            <MudTh>Action</MudTh>
        </MudTHeadRow>
    </HeaderContent>
    <RowTemplate Context="agent">
        <MudTd><MudLink Target="_blank" Href=@($"/agent/{agent.Id}")>@agent.Name</MudLink></MudTd>
        <MudTd>
            @((MarkupString)FormatNumberRank(agent.Score, game.Agents.Select(a => a.Score)))
            @if (agent.Progress(game.SeedCount) != 100)
            {
                <MudProgressCircular Class="ml-2" Color="Color.Primary" Style="height:16px;width:16px;" Value="@agent.Progress(game.SeedCount)" />
            }
        </MudTd>
        @foreach (Parameter p in game.Parameters)
        {
            @foreach (ParameterRange range in p.Ranges)
            {
                <MudTd>@((MarkupString)FormatNumberRank(agent.RangeScore(range), game.Agents.Select(a => a.RangeScore(range))))</MudTd>
            }
        }
        <MudTd>
            <MudButton Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Download">
                Download</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter] public int Id { get; set; }
    private Game game;
    private int maxThreads = 4;
    private int MaxThreads { get => maxThreads; set { maxThreads = value; PlayQueue(); } }
    private PriorityQueue<(Agent agent, SeedInfo seedInfo), int> toRun = new();

    protected override void OnParametersSet()
    {
        using var context = DbFactory.CreateDbContext();
        game = context.Games
        .Include(g => g.Parameters)
        .ThenInclude(p => p.Ranges)
        .Include(g => g.SeedInfos)
        .ThenInclude(s => s.ParameterValues)
        .ThenInclude(p => p.Parameter)
        .Include(g => g.Agents)
        .ThenInclude(a => a.TestcaseResults)
        .AsSplitQuery()
        .First(g => g.Id == Id);
        game.Agents = game.Agents.OrderByDescending(a => a.Id).ToList();
        game.InitScores();

        foreach (Agent agent in game.Agents) PopulateQueue(agent);
        StateHasChanged();
        PlayQueue();
    }

    private async Task AddAgent()
    {
        var parameters = new DialogParameters();
        Agent agent = new Agent { Language = "C#" };
        parameters.Add("Agent", agent);
        parameters.Add("Game", game);
        var dialog = await DialogService.ShowAsync<CreateAgentDialog>("Agent", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            agent = result.Data as Agent;
            game.Agents.Insert(0, agent);
            PopulateQueue(agent);
        }
        PlayQueue();
    }

    private void PopulateQueue(Agent agent)
    {
        Dictionary<int, TestcaseResult> existing = agent.TestcaseResults.ToDictionary(t => t.Seed, t => t);
        foreach (SeedInfo seedInfo in game.SeedInfos)
        {
            if (!existing.ContainsKey(seedInfo.Seed)) toRun.Enqueue((agent, seedInfo), seedInfo.Seed);
        }
    }

    private int runningCount = 0;
    private void PlayQueue()
    {
        while (toRun.Count > 0 && runningCount < MaxThreads)
        {
            runningCount++;
            RunQueueThread();
        }
    }

    private void RunQueueThread()
    {
        new Thread(async () => {
            while (true)
            {
                Agent agent = null;
                SeedInfo info = null;
                lock (toRun)
                {
                    if (!game.Running || runningCount > maxThreads || toRun.Count == 0)
                    {
                        runningCount--;
                        break;
                    }
                    (agent, info) = toRun.Dequeue();
                }

                Process process = new Process();
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.WorkingDirectory = Path.GetDirectoryName(Directory.GetCurrentDirectory() + "/" + game.TesterPath);
                process.StartInfo.FileName = "java";
                process.StartInfo.Arguments = $"-jar \"{Path.GetFileName(game.TesterPath)}\" -printRuntime -novis -seed {info.Seed} -exec \"{agent.ExecuteCommand}\"";
                process.Start();
                string stdOut = process.StandardOutput.ReadToEnd();
                process.WaitForExit();
                string line = stdOut.Trim();

                Match match = Regex.Match(line, @"Score = (?<number>\d+(\.\d+)?)");
                double score = double.Parse(match.Groups["number"].Value, CultureInfo.InvariantCulture);
                match = Regex.Match(line, @"RunTime = (?<number>\d+)");
                int time = match.Success ? int.Parse(match.Groups["number"].Value) : 0;
                TestcaseResult result = new TestcaseResult { Seed = info.Seed, Score = score, Time = time };
                agent.AddTestcaseResult(info, game, result);
                lock (toRun)
                {
                    using var context = DbFactory.CreateDbContext();
                    agent = context.Agents.Include(a => a.TestcaseResults).First(a => a.Id == agent.Id);
                    agent.AddTestcaseResult(info, game, result);
                    context.SaveChanges();
                }
                await InvokeAsync(StateHasChanged);
            }
        }).Start();
    }

    private string FormatNumberRank(double score, IEnumerable<double> allScores)
    {
        int rank = 1 + allScores.Count(s => s > score);
        string result = score.ToString("0.000") + " [" + rank + "]";
        if (rank == 1) return "<b>" + result + "</b>";
        return result;
    }

    private void Stop() => game.Running = false;
    private void Start() {
        game.Running = true;
        PlayQueue();
    }
}