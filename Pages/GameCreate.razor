@page "/game/create"
@page "/game/edit/{Id:int}"
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IDialogService DialogService
@inject NavigationManager navigationManager

<h1>@Title()</h1>

<EditForm Model="@game" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Display Title" @bind-Value="game.DisplayTitle" For="@(() => game.DisplayTitle)" />
            <MudTextField Label="Export Title" Class="mt-3" @bind-Value="game.ExportTitle"
                For="@(() => game.ExportTitle)" />
            <div class="mt-3">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadReferee">
                    <ButtonTemplate Context="uploadContext">
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.CloudUpload" for="@uploadContext">
                            Upload Referee
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
                <MudText>@(file?.Name ?? Path.GetFileName(game.TesterPath))</MudText>
            </div>
            <MudCheckBox T="bool" Label="Maximize" Class="mt-3" @bind-Checked="game.Maximize" />
            <MudTextField Label="Seed Start" Class="mt-3" @bind-Value="game.SeedStart" For="@(() => game.SeedStart)" />
            <MudTextField Label="Seed Count" Class="mt-3" @bind-Value="game.SeedCount" For="@(() => game.SeedCount)" />
            <MudTable Class="mt-3" Hover="true" Striped="true" Items="@game.Parameters">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="mr-5">Parameters</MudText>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary"
                        OnClick="()=>EditParameter(new Parameter())">Add parameter</MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Internal name</MudTh>
                    <MudTh>Display name</MudTh>
                    <MudTh>Ranges</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate Context="parameter">
                    <MudTd>@parameter.InternalName</MudTd>
                    <MudTd>@parameter.DisplayName</MudTd>
                    <MudTd>@(string.Join(", ", parameter.Ranges))</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Class="mr-2"
                            Color="Color.Primary" OnClick="()=>EditParameter(parameter)">Edit</MudButton>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete"
                            Color="Color.Error" OnClick="()=>DeleteParameter(parameter)">Delete</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
        <MudCardActions>
            @if (generatingSeedInfo)
            {
                <MudAlert Severity="Severity.Info">
                    <MudProgressLinear Color="Color.Primary" Value="@seedProgress" Class="my-7" />
                    Generating seed info, this can take a moment
                </MudAlert>
            }
            else
            {
                @if (Id == 0)
                {
                    <MudButton Variant="Variant.Filled" Href="/" Class="mr-2">
                        Back to list
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Href="@($"/game/{Id}")" Class="mr-2">
                        Back to game
                    </MudButton>
                }
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                    @ButtonText()
                </MudButton>
            }
        </MudCardActions>
    </MudCard>
</EditForm>


@code {
    [Parameter] public int Id { get; set; }
    private Game game = new Game { Maximize = true };
    private bool generatingSeedInfo = false;
    private int seedProgress = 0;

    protected override void OnParametersSet()
    {
        if (Id == 0) return;
        using var context = DbFactory.CreateDbContext();
        game = context.Games.Include(g => g.Parameters).ThenInclude(p => p.Ranges).First(g => g.Id == Id);
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        using var context = DbFactory.CreateDbContext();
        if (game.Id == 0) context.Games.Add(game);
        else
        {
            Game existing = context.Games
            .Include(g => g.Parameters).ThenInclude(p => p.Ranges)
            .Include(g => g.SeedInfos).ThenInclude(s => s.ParameterValues).ThenInclude(p => p.Parameter)
            .First(g => g.Id == game.Id);
            existing.DisplayTitle = game.DisplayTitle;
            existing.ExportTitle = game.ExportTitle;
            existing.Maximize = game.Maximize;
            existing.SeedStart = game.SeedStart;
            existing.SeedCount = game.SeedCount;
            bool parametersChanged = game.Parameters.Any(p => p.Id == 0 || p.Ranges.Any(r => r.Id == 0));
            foreach (Parameter deleteParam in existing.Parameters.ToList())
            {
                Parameter partner = game.Parameters.FirstOrDefault(mp => mp.Id == deleteParam.Id);
                if (partner == null)
                {
                    existing.Parameters.Remove(deleteParam);
                    context.Parameters.Remove(deleteParam);
                    context.Ranges.RemoveRange(deleteParam.Ranges);
                    parametersChanged = true;
                }
                else
                {
                    foreach (ParameterRange deleteRange in deleteParam.Ranges.ToList())
                    {
                        if (!partner.Ranges.Any(r => r.Id == deleteRange.Id))
                        {
                            deleteParam.Ranges.Remove(deleteRange);
                            context.Ranges.Remove(deleteRange);
                            parametersChanged = true;
                        }
                    }
                    deleteParam.Ranges.AddRange(partner.Ranges.Where(r => r.Id == 0));
                }
            }
            existing.Parameters.AddRange(game.Parameters.Where(p => p.Id == 0));
            if (parametersChanged)
            {
                context.SeedInfos.RemoveRange(existing.SeedInfos.ToList());
                context.ParameterValues.RemoveRange(existing.SeedInfos.SelectMany(s => s.ParameterValues).ToList());
                existing.SeedInfos.Clear();
            }
            game = existing;
        }
        context.SaveChanges();

        if (file != null)
        {
            game.TesterPath = game.Folder + file.Name;
            Directory.CreateDirectory(game.Folder);
            using FileStream fs = new(game.TesterPath, FileMode.Create);
            await file.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024).CopyToAsync(fs);
            fs.Close();
            context.SaveChanges();
        }

        generatingSeedInfo = true;
        for (int i = 0; i < game.SeedCount; i++)
        {
            seedProgress = 100 * i / game.SeedCount;
            await game.GenerateSeedInfo(game.SeedStart + i);
            StateHasChanged();
        }
        context.SaveChanges();

        navigationManager.NavigateTo("/game/" + game.Id);
    }

    private string Title()
    {
        if (Id == 0) return "Create a new game";
        return "Edit game";
    }

    private string ButtonText()
    {
        if (Id == 0) return "Create";
        return "Update";
    }

    private IBrowserFile file;
    private void UploadReferee(IBrowserFile toUpload)
    {
        file = toUpload;
    }

    private async Task EditParameter(Parameter parameter)
    {
        var parameters = new DialogParameters();
        parameters.Add("Parameter", parameter);
        var dialog = await DialogService.ShowAsync<ParameterEditDialog>("Parameter", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (!game.Parameters.Contains(parameter)) game.Parameters.Add(parameter);
        }
    }

    private void DeleteParameter(Parameter parameter)
    {
        game.Parameters.Remove(parameter);
    }
}