@page "/game/create"
@page "/game/edit/{Id:int}"
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IDialogService DialogService
@inject NavigationManager navigationManager

<h1>@Title()</h1>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Display Title" @bind-Value="model.DisplayTitle" For="@(() => model.DisplayTitle)" />
            <MudTextField Label="Export Title" Class="mt-3" @bind-Value="model.ExportTitle"
                For="@(() => model.ExportTitle)" />
            <div class="mt-3">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadReferee">
                    <ButtonTemplate Context="uploadContext">
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.CloudUpload" for="@uploadContext">
                            Upload Referee
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
                <MudText>@(file?.Name ?? Path.GetFileName(model.TesterPath))</MudText>
            </div>
            <MudCheckBox T="bool" Label="Maximize" Class="mt-3" @bind-Checked="model.Maximize" />
            <MudTextField Label="Seed Start" Class="mt-3" @bind-Value="model.SeedStart"
                For="@(() => model.SeedStart)" />
            <MudTextField Label="Seed Count" Class="mt-3" @bind-Value="model.SeedCount"
                For="@(() => model.SeedCount)" />
            <MudTable Class="mt-3" Hover="true" Striped="true" Items="@model.Parameters">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="mr-5">Parameters</MudText>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary"
                        OnClick="()=>EditParameter(new Parameter())">Add parameter</MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Internal name</MudTh>
                    <MudTh>Display name</MudTh>
                    <MudTh>Ranges</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate Context="parameter">
                    <MudTd>@parameter.InternalName</MudTd>
                    <MudTd>@parameter.DisplayName</MudTd>
                    <MudTd>@(string.Join(", ", parameter.Ranges))</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Class="mr-2"
                            Color="Color.Primary" OnClick="()=>EditParameter(parameter)">Edit</MudButton>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete"
                            Color="Color.Error" OnClick="()=>DeleteParameter(parameter)">Delete</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
        <MudCardActions>
            @if (Id == 0)
            {
                <MudButton Variant="Variant.Filled" Href="/" Class="mr-2">
                    Back to list
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Href="@($"/game/{Id}")" Class="mr-2">
                    Back to game
                </MudButton>
            }
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                @ButtonText()
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    [Parameter] public int Id { get; set; }
    Game model = new Game { Maximize = true };

    protected override void OnParametersSet()
    {
        if (Id == 0) return;
        using var context = DbFactory.CreateDbContext();
        model = context.Games.Include(g => g.Parameters).ThenInclude(p => p.Ranges).First(g => g.Id == Id);
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        using var context = DbFactory.CreateDbContext();
        if (model.Id == 0) context.Games.Add(model);
        else
        {
            Game existing = context.Games.Include(g => g.Parameters).ThenInclude(p => p.Ranges)
            .First(g => g.Id == model.Id);
            existing.DisplayTitle = model.DisplayTitle;
            existing.ExportTitle = model.ExportTitle;
            existing.Maximize = model.Maximize;
            existing.SeedStart = model.SeedStart;
            existing.SeedCount = model.SeedCount;
            foreach (Parameter deleteParam in existing.Parameters.ToList())
            {
                Parameter partner = model.Parameters.FirstOrDefault(mp => mp.Id == deleteParam.Id);
                if (partner == null)
                {
                    existing.Parameters.Remove(deleteParam);
                    context.Parameters.Remove(deleteParam);
                    context.Ranges.RemoveRange(deleteParam.Ranges);
                }
                else
                {
                    foreach (ParameterRange deleteRange in deleteParam.Ranges.ToList())
                    {
                        if (!partner.Ranges.Any(r => r.Id == deleteRange.Id))
                        {
                            deleteParam.Ranges.Remove(deleteRange);
                            context.Ranges.Remove(deleteRange);
                        }
                    }
                    deleteParam.Ranges.AddRange(partner.Ranges.Where(r => r.Id == 0));
                }
            }
            existing.Parameters.AddRange(model.Parameters.Where(p => p.Id == 0));
            model = existing;
        }
        context.SaveChanges();
        if (file != null)
        {
            model.TesterPath = model.Folder + file.Name;
            Directory.CreateDirectory(model.Folder);
            using FileStream fs = new(model.TesterPath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);
            context.SaveChanges();
        }
        navigationManager.NavigateTo("/game/" + model.Id);
    }

    private string Title()
    {
        if (Id == 0) return "Create a new game";
        return "Edit game";
    }

    private string ButtonText()
    {
        if (Id == 0) return "Create";
        return "Update";
    }

    private IBrowserFile file;
    private void UploadReferee(IBrowserFile toUpload)
    {
        file = toUpload;
    }

    private async Task EditParameter(Parameter parameter)
    {
        var parameters = new DialogParameters();
        parameters.Add("Parameter", parameter);
        var dialog = await DialogService.ShowAsync<ParameterEditDialog>("Parameter", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (!model.Parameters.Contains(parameter)) model.Parameters.Add(parameter);
        }
    }

    private void DeleteParameter(Parameter parameter)
    {
        model.Parameters.Remove(parameter);
    }
}