// <auto-generated />
using System;
using LocalEnv.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LocalEnv.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230128064955_seed-long")]
    partial class seedlong
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("LocalEnv.Model.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BinaryPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("CodePath")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("LocalEnv.Model.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExportTitle")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Maximize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeedCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeedStart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TesterPath")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("LocalEnv.Model.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InternalName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("LocalEnv.Model.ParameterRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("MaxValue")
                        .HasColumnType("REAL");

                    b.Property<double>("MinValue")
                        .HasColumnType("REAL");

                    b.Property<int?>("ParameterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParameterId");

                    b.ToTable("Ranges");
                });

            modelBuilder.Entity("LocalEnv.Model.ParameterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParameterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeedInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ParameterId");

                    b.HasIndex("SeedInfoId");

                    b.ToTable("ParameterValues");
                });

            modelBuilder.Entity("LocalEnv.Model.SeedInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Seed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("SeedInfos");
                });

            modelBuilder.Entity("LocalEnv.Model.TestcaseResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalOutput")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AgentId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.Property<long>("Seed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Time")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("TestcaseResults");
                });

            modelBuilder.Entity("LocalEnv.Model.Agent", b =>
                {
                    b.HasOne("LocalEnv.Model.Game", null)
                        .WithMany("Agents")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("LocalEnv.Model.Parameter", b =>
                {
                    b.HasOne("LocalEnv.Model.Game", null)
                        .WithMany("Parameters")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("LocalEnv.Model.ParameterRange", b =>
                {
                    b.HasOne("LocalEnv.Model.Parameter", null)
                        .WithMany("Ranges")
                        .HasForeignKey("ParameterId");
                });

            modelBuilder.Entity("LocalEnv.Model.ParameterValue", b =>
                {
                    b.HasOne("LocalEnv.Model.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId");

                    b.HasOne("LocalEnv.Model.SeedInfo", null)
                        .WithMany("ParameterValues")
                        .HasForeignKey("SeedInfoId");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("LocalEnv.Model.SeedInfo", b =>
                {
                    b.HasOne("LocalEnv.Model.Game", null)
                        .WithMany("SeedInfos")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("LocalEnv.Model.TestcaseResult", b =>
                {
                    b.HasOne("LocalEnv.Model.Agent", null)
                        .WithMany("TestcaseResults")
                        .HasForeignKey("AgentId");
                });

            modelBuilder.Entity("LocalEnv.Model.Agent", b =>
                {
                    b.Navigation("TestcaseResults");
                });

            modelBuilder.Entity("LocalEnv.Model.Game", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Parameters");

                    b.Navigation("SeedInfos");
                });

            modelBuilder.Entity("LocalEnv.Model.Parameter", b =>
                {
                    b.Navigation("Ranges");
                });

            modelBuilder.Entity("LocalEnv.Model.SeedInfo", b =>
                {
                    b.Navigation("ParameterValues");
                });
#pragma warning restore 612, 618
        }
    }
}
